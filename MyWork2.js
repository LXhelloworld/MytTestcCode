/*
    第一题
    输出为 10
    在a[6]()执行时for已经循环完毕而外层的i经过循环已经变成10了所以a[6]()执行时打印时
    找到的i就是10

*/


/*
    第二题
    会报错
    若if代码块中没有定义tmp时console.log打印时会找到外层的tmp
    但是当if代码块中有let定义的变量时会找if代码块中的tmp又因为let定义的tmp在console.log下边
    并且let定义的变量是向下的不存在变量提升所以会报tmp未初始化的错

*/


/*
    第三题
*/


var arr = [12, 34, 32, 89, 4];
var minNum = arr[0];


arr.forEach((item, index) => {
    if(item < minNum) {
        minNum = item
    }
})

console.log(minNum)

/*
    第四题
    1.var声明的变量会挂载在window上，而let和const声明的变量不会
    2.var声明变量存在变量提升，let和const不存在变量提升
    3.let和const声明形成块作用域
    4.同一作用域下let和const不能声明同名变量，而var可以
    5.const一旦声明必须赋值,不能使用null占位；声明后不能再修改 ；如果声明的是复合类型数据，可以修改其属性
*/



/* 
    第五题
    20
    console.log是在一个箭头函数中箭头函数本身是没有this的所以它中的this相当于它外层函数的this
    而最后执行的是obj.fn（）所以fn（）中的this就是obj对象所以箭头函数中console.log中的this.a就是obj对象的a
*/

/* 
    第六题
    1.防止属性名冲突
    2.模拟对象的私有属性
*/

/* 
    第七题
    浅拷贝只是增加了一个指针指向已存在的内存地址，
    深拷贝是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，
*/

/* 
    第八题
    TypeScript是JavaScript的拓展集，并且最后运行会被编译成JavaScript
    1.TypeScript可以运行JavaScript所有代码和编码方式
    2.使用TypeScript中一些新的概念，可使JavaScript开发变得容易和快捷
    3.TypeScript 加入一些新的概念(类) 使javascript实现一些复杂功能变得容易
    4.javascript 可以直接同Typescript一起运行，编译器会将Typescript代码转换为javascript
    5.Typescript中有静态类型,javascrip则没有
    6.TypeScript中每一个数据必须规定其数据类型，JavaScript不要求
    7.TypeScript为函数提供了缺省参数值。
    8.TypeScript中有模块的概念，可以封装数据 类 函数 声明等信息在模块里面
*/
/* 
    第九题
    1.增加学习成本，需要理解接口（Interfaces）和泛型（Generics），类（class），枚举类型（Enums）
    2.短期增加开发成本，增加类型定义，但减少维护成本
    3.ts 集成到构建流程需要一定的工作量
    4.和有些库结合时不是很完美
*/
/* 
    第十题
    内部通过设置一个计数器来判断一个对象的引用数值，当引用数值为0把他GC把它归为垃圾对象并把它所在空间当垃圾空间回收
    优点:
        1.发现垃圾是立即回收
        2.最大限度减少程序暂停
    缺点：
        1.无法回收循环引用的对象
        2.时间开销大
*/
/* 
    第十一题
    遍历所有对象找标记活动的对象(可达对象)
    再遍历所有对象清除未标记对象但是清除之前先去执行一个整理的操作使其地址连续
    优点：
        不会出现大批量的空间碎片
    缺点：
        两次遍历，耗时严重

*/

/* 
    第十二题
    1.把新生代内存区分为来个等大小的空间
    2.使用空间为from，空闲空间为to
    3.活动对象储存在from
    4.标记整理后将活动对象拷贝至to
    5.from和to交换空间完成释放
*/

/* 
    第十三题
    在老生代存储区空间较大对象较多，所以在需要优化垃圾回收的时候会使用增量标记算法
    它的工作原理就是分阶段清理
    垃圾回收操作与程序执行交替运行，不用一次性把所有对象都标记。
*/